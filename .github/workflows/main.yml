# name: vprofile actions
# on: workflow_dispatch
# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: vprofileapp
#   EKS_CLUSTER: vprofile-eks

# jobs:
#   # Job-1: Testing
#   Testing:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Maven test
#         run: mvn test

#       - name: Checkstyle
#         run: mvn checkstyle:checkstyle

#       # Setup java 11 to be default (sonar-scanner requirement as of 5.x)
#       - name: Set Java 11
#         uses: actions/setup-java@v3
#         with:
#           distribution: "temurin" # See 'Supported distributions' for available options
#           java-version: "11"

#       # Setup sonar-scanner
#       - name: Setup SonarQube
#         uses: warchant/setup-sonar-scanner@v7

#       # Run sonar-scanner
#       - name: SonarQube Scan
#         run: sonar-scanner
#           -Dsonar.host.url=${{ secrets.SONAR_URL }}
#           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
#           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#           -Dsonar.sources=src/
#           -Dsonar.junit.reportsPath=target/surefire-reports/
#           -Dsonar.jacoco.reportsPath=target/jacoco.exec
#           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
#           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

#       # Check the Quality Gate status.
#       # - name: SonarQube Quality Gate check
#       #   id: sonarqube-quality-gate-check
#       #   uses: sonarsource/sonarqube-quality-gate-action@master
#       #   # Force to fail step after specific time.
#       #   timeout-minutes: 5
#       #   env:
#       #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

#   # Job-2: Build and Publish
#   BUILD_AND_PUBLISH:
#     needs: Testing
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Build & Upload image to ECR
#         uses: appleboy/docker-ecr-action@master
#         with:
#           access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           registry: ${{ secrets.REGISTRY }}
#           repo: ${{ env.ECR_REPOSITORY }}
#           region: ${{ env.AWS_REGION }}
#           tags: latest,${{ github.run_number }}
#           daemon_off: false
#           dockerfile: ./Dockerfile
#           context: ./
#           build-args: |
#             BASE_IMAGE=tomcat:9.0.54-jre11

#   # Job-3: Deploy To EKS
#   DeployToEKS:
#     needs: BUILD_AND_PUBLISH
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Get Kube config file
#         run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

#       - name: Print config file
#         run: cat ~/.kube/config

#       # - name: Login to ECR
#       #   run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=${{ secrets.AWS_USER_NAME }}  --docker-password=${{ secrets.REGISTRY_PASSWORD }}

#       - name: Login to ECR
#         run: |
#           if ! kubectl get secret regcred >/dev/null 2>&1; then
#           kubectl create secret docker-registry regcred \
#           --docker-server=${{ secrets.REGISTRY }} \
#           --docker-username=${{ secrets.AWS_USER_NAME }} \
#           --docker-password=${{ secrets.REGISTRY_PASSWORD }}
#           else
#           echo "ECR secret already exists. Skipping login."
#           fi

#       - name: Deploy Helm
#         uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#           cluster-name: ${{ env.EKS_CLUSTER }}
#           #config-files: .github/values/dev.yaml
#           chart-path: helm/vprofilecharts
#           namespace: default
#           values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
#           name: vprofile-stack

# name: vprofile actions

# on: workflow_dispatch

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: vprofileapp
#   EKS_CLUSTER: vprofile-eks

# jobs:
#   # Job-1: Testing
#   Testing:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4
#         with:
#           submodules: true # Ensure submodules are checked out if needed
#           fetch-depth: 0 # Fetch the full history for accurate builds

#       - name: Maven test
#         run: mvn test

#       - name: Checkstyle
#         run: mvn checkstyle:checkstyle

#       - name: Set Java 11
#         uses: actions/setup-java@v3
#         with:
#           distribution: "temurin"
#           java-version: "11"

#       - name: Setup SonarQube
#         uses: warchant/setup-sonar-scanner@v7

#       - name: SonarQube Scan
#         run: |
#           sonar-scanner \
#             -Dsonar.host.url=${{ secrets.SONAR_URL }} \
#             -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
#             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
#             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#             -Dsonar.sources=src/ \
#             -Dsonar.junit.reportsPath=target/surefire-reports/ \
#             -Dsonar.jacoco.reportsPath=target/jacoco.exec \
#             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
#             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

#   # Job-2: Build and Publish
#   BUILD_AND_PUBLISH:
#     needs: Testing
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Build & Upload image to ECR
#         uses: appleboy/docker-ecr-action@master
#         with:
#           access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           registry: ${{ secrets.REGISTRY }}
#           repo: ${{ env.ECR_REPOSITORY }}
#           region: ${{ env.AWS_REGION }}
#           tags: latest,${{ github.run_number }}
#           daemon_off: false
#           dockerfile: ./Dockerfile
#           context: ./
#           build-args: |
#             BASE_IMAGE=tomcat:9.0.54-jre11

#   # Job-3: Deploy To EKS
#   DeployToEKS:
#     needs: BUILD_AND_PUBLISH
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Get Kube config file
#         run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

#       - name: Print config file
#         run: cat ~/.kube/config

#       - name: Login to ECR
#         run: |
#           if ! kubectl get secret regcred >/dev/null 2>&1; then
#             kubectl create secret docker-registry regcred \
#             --docker-server=${{ secrets.REGISTRY }} \
#             --docker-username=${{ secrets.AWS_USER_NAME }} \
#             --docker-password=${{ secrets.REGISTRY_PASSWORD }}
#           else
#             echo "ECR secret already exists. Skipping login."
#           fi

#       - name: Deploy Helm
#         uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#           cluster-name: ${{ env.EKS_CLUSTER }}
#           chart-path: helm/vprofilecharts
#           namespace: default
#           values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
#           name: vprofile-stack

# name: vprofile actions

# on: workflow_dispatch

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: vprofileapp
#   EKS_CLUSTER: vprofile-eks

# jobs:
#   # Job-1: Testing
#   Testing:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4
#         with:
#           submodules: true
#           fetch-depth: 0

#       - name: Set Java 11
#         uses: actions/setup-java@v3
#         with:
#           distribution: "temurin"
#           java-version: "11"

#       - name: Maven test
#         run: mvn test

#       - name: Checkstyle
#         run: mvn checkstyle:checkstyle

#       - name: Setup SonarQube
#         uses: warchant/setup-sonar-scanner@v7

#       - name: SonarQube Scan
#         run: |
#           sonar-scanner \
#             -Dsonar.host.url=${{ secrets.SONAR_URL }} \
#             -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
#             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
#             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#             -Dsonar.sources=src/ \
#             -Dsonar.junit.reportsPath=target/surefire-reports/ \
#             -Dsonar.jacoco.reportsPath=target/jacoco.exec \
#             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
#             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

#   # Job-2: Build and Publish
#   BUILD_AND_PUBLISH:
#     needs: Testing
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Build & Upload image to ECR
#         uses: appleboy/docker-ecr-action@master
#         with:
#           access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           registry: ${{ secrets.REGISTRY }}
#           repo: ${{ env.ECR_REPOSITORY }}
#           region: ${{ env.AWS_REGION }}
#           tags: latest,${{ github.run_number }}
#           daemon_off: false
#           dockerfile: ./Dockerfile
#           context: ./
#           build-args: |
#             BASE_IMAGE=tomcat:9.0.54-jre11

#   # Job-3: Deploy To EKS
#   DeployToEKS:
#     needs: BUILD_AND_PUBLISH
#     runs-on: ubuntu-latest
#     steps:
#       - name: Code checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Get Kube config file
#         run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

#       - name: Verify Ingress Controller
#         run: |
#           if ! kubectl get svc -n ingress-nginx ingress-nginx-controller-admission; then
#             echo "Ingress Controller admission webhook not found!" && exit 1
#           fi

#       - name: Login to ECR
#         run: |
#           if ! kubectl get secret regcred >/dev/null 2>&1; then
#             kubectl create secret docker-registry regcred \
#               --docker-server=${{ secrets.REGISTRY }} \
#               --docker-username=${{ secrets.AWS_USER_NAME }} \
#               --docker-password=${{ secrets.REGISTRY_PASSWORD }}
#           else
#             echo "ECR secret already exists. Skipping login."
#           fi

#       - name: Deploy Helm
#         uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#           cluster-name: ${{ env.EKS_CLUSTER }}
#           chart-path: helm/vprofilecharts
#           namespace: default
#           values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
#           name: vprofile-stack

#       - name: Check Helm Deployment Status
#         run: |
#           helm status vprofile-stack -n default
#           if [ $? -ne 0 ]; then
#             echo "Helm deployment failed! Checking pods..."
#             kubectl get pods -A
          #   kubectl describe pod -n ingress-nginx
          #   exit 1
          # fi

name: vprofile actions

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  # Job-1: Testing
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

  # Job-2: Build and Publish
  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./
          build-args: |
            BASE_IMAGE=tomcat:9.0.54-jre11

  # Job-3: Deploy To EKS
  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Debug Ingress Controller Pod
        run: |
          kubectl get pods -n ingress-nginx -o wide
          kubectl describe pod -n ingress-nginx -l app.kubernetes.io/component=controller
          kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller --tail=50

      - name: Checking Ingress Controller readiness
        run: |
          echo "Checking Ingress Controller readiness..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Restart Ingress Controller (if not ready)
        run: |
          if ! kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
            echo "Ingress Controller not ready, restarting..."
            kubectl rollout restart deployment ingress-nginx-controller -n ingress-nginx
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=300s
          fi

      - name: Checking Ingress Admission Webhook endpoints
        run: |
          echo "Checking Ingress Admission Webhook endpoints..."
          kubectl get endpoints ingress-nginx-controller-admission -n ingress-nginx

      - name: Login to ECR
        run: |
          if ! kubectl get secret regcred >/dev/null 2>&1; then
            kubectl create secret docker-registry regcred \
              --docker-server=${{ secrets.REGISTRY }} \
              --docker-username=${{ secrets.AWS_USER_NAME }} \
              --docker-password=${{ secrets.REGISTRY_PASSWORD }}
          else
            echo "ECR secret already exists. Skipping login."
          fi

      - name: Deploy using Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          chart-path: helm/vprofilecharts
          namespace: default
          values: |
            appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}
            apptag=${{ github.run_number }}
          name: vprofile-stack
          action: upgrade
          helm-wait: true
          atomic: true
          timeout: 600s

      - name: Verify Deployment
        run: |
          echo "Verifying Deployment..."
          kubectl rollout status deployment/vprofile-stack -n default
          kubectl get pods -n default -o wide
